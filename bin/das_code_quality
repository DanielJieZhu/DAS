#!/bin/bash

if [ "$#" -gt 3 ] || [ "$#" -eq 0 ]; then
    echo "Usage: das_code_quality.sh <dir to look for code> <optional threshold up to 10> <stop at first failure, true or false>"
    exit 1
fi 

root=$1

if [ "$#" -eq 1 ]; then
thr=9
else
thr=$2
fi

if  [ "$#" -eq 3 ]; then
immediate=$3
else
immediate="true"
fi

cmd="pylint --disable=C0326"

echo "Run pylint with $thr/10 threshold level, exit immediate=$immediate"
echo

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NO_COLOUR=$(tput sgr0)

files=`find $root -name "*.py" | grep -v ipy_profile_mongo | grep -v sample_config | grep -v parsetab.py | grep -v jsonwrapper`
fail_files=0
for f in $files
do
    # TMP,
    # https://bitbucket.org/logilab/pylint/issue/84/pyreverse-typeerror-unbound-method-infer
    fname=`echo $f | awk '{z=split($1,a,"/"); print a[z]}'`
    if [ $fname == "das_stress_test.py" ]; then
        continue
    fi
    if [ $fname == "das_config.py" ]; then
        continue # this is special file
    fi
    echo
    echo $f
    has_key=`grep has_key $f`
    if [ "$has_key" != "" ]; then
        echo "File $f has has_key dict method (obsolete in python3), please fix this issue"
        exit 1
    fi
    out=`$cmd $f | grep "Your code"`
    msg=`echo $out | grep -v "No config" | awk '{split($0,a,"at "); split(a[2],b,"/"); split(b[1],c,".");if(c[1]<THR) print "FAIL, score "b[1]"/10"; else print "PASS"}' THR=$thr`
    if  [ "$msg" != "PASS" ] && [ "$immediate" == "true" ]; then
        echo "${RED}--- $msg${NO_COLOUR}"
        $cmd $f
        exit 1
    fi
    if [ "$msg" == "PASS" ]; then
        echo "${GREEN}+++ PASS${NO_COLOUR}"
    else
        echo "${RED}--- $msg${NO_COLOUR}"
        fail_files=$(($fail_files+1))
    fi
done

if [ $fail_files != 0 ]; then
    echo "$RED===== Total number of failures ====={NO_COLOUR}"
    echo "$REDFAIL $fail_files times{NO_COLOUR}"
fi
