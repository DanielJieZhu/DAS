#!/bin/bash

# find out where DAS is installed on a system
dasroot=`python -c "import DAS; print '/'.join(DAS.__file__.split('/')[:-1])"`

# define location of DAS maps
if [ -n "$1" ]; then
    das_map_dir=$1
else
    das_map_dir="$dasroot/services/cms_maps/"
fi
echo "DAS YML: $das_map_dir"

# build DAS JSON maps out of DAS YML files
# the dasmaps js files are written to src/python/DAS/services/cms_maps/ into
# das_maps.js and das_testbed_maps.js

# build DAS JSON maps out of DAS YML files
build_das_maps()
{
    cmd="python $dasroot/tools/das_drop_maps.py"
    dir=$das_map_dir
    tdir=/tmp/dasmaps
    rm -rf $tdir
    mkdir -p $tdir
    cp $dir/*.yml $tdir
    if [ "$1" == "production" ]; then
        map_file="$dir/das_maps.js"
    else
        # testbed maps, replace with testbed urls
        for amap in `ls $tdir/*.yml`
        do
            /bin/cat $amap | sed "s/cmsweb.cern.ch/cmsweb-testbed.cern.ch/g" > $amap.tmp
            rm -f $amap
            mv $amap.tmp $amap
        done
        map_file="$dir/das_testbed_maps.js"
    fi
    rm -f $map_file
    export PYTHONPATH=$PYTHONPATH:$PWD/src/python
    for amap in `ls $tdir/*.yml`
    do
        $cmd --uri-map=$amap >> $map_file
        $cmd --notation-map=$amap >> $map_file
        $cmd --presentation-map=$amap >> $map_file
    done
    /bin/cat $map_file | grep -v "###" > $map_file.tmp
    rm -f $map_file
    mv $map_file.tmp $map_file
    rm -rf $tdir
    $cmd --get-verification-token-for=$map_file | grep -v "###" >> $map_file
    echo "Created: $map_file"

}

# generate production DAS maps
build_das_maps "production"

# generate pre-production DAS maps
build_das_maps "pre-production"
