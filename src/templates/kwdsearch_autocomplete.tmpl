#from DAS.web.utils import quote

<!-- das_ambiguous.tmpl -->
<div> <!-- main div -->

    <style type="text/css">
        .ui-autocomplete {
            /*width:  500px;*/
            font-size: 0.8em!important;
        }
    </style>
    <link rel="stylesheet" href="/das/css/?f=jquery-ui.css&f=jquery.tagit.css&f=kwsearch.css" />
    <script type="text/javascript" src="/das/js/?f=visualsearch-dependencies.min.js&f=tag-it.js&f=jquery.ui.tooltip.js"></script>
    <!--
    <script src="http://documentcloud.github.com/visualsearch/build-min/dependencies.js"
            type="text/javascript"></script> -->

    <script type="text/javascript">
        jQuery.noConflict();
    </script>

    <!--
    <script type="text/javascript" src="/das/js/?f=visualsearch.min.js&f=autocomplete_kws.js"></script>
    -->
    <script type="text/javascript" src="/das/js/?f=visualsearch.js&f=autocomplete_kws.js"></script>

    <!--[if lte IE 7]><!-->
    <link href="/das/css/?f=visualsearch.css"
          media="screen" rel="stylesheet" type="text/css"/>
    <!--<![endif]-->
    <!--[if (!IE)|(gte IE 8)]><!-->
    <link href="/das/css/?f=visualsearch-datauri.css"
          media="screen" rel="stylesheet" type="text/css"/>
    <!-- TODO: copy img files -->
    <!--<![endif]-->



    <b style="color: #666">Describe what do you know about the data (i.e. how to filter it out)</b><br />

    <input type="submit" value="Search" id="submit"  style="float:right; font-weight: bold;" class="ui-button"/>
    <div id="filters" class="visual_search_filters"></div>

    <br />

    <label for="result_entities"> Optionally select or describe what you are searching for</label>
    <input id="result_entities" type="text" class="visual_search_result_type" title="e.g. dataset; magnetic field" /><br />


    <div id="search_query"></div>

    <div id="results-async"></div>


    <script type="text/javascript" charset="utf-8">
        var _DEBUG = true;




        jQuery(document).ready(function (query) {
            var visualSearch;

            var do_search_async = function() {

                var query = visualSearch.searchBox.value();

                if (_DEBUG) console.log(query);


                // TODO: add delay, so executed at most ones in 5 seconds
                // TODO: shall we also delay it so it would not be executed if still being edited?
                var conditions = query.replace(':', '=');
                // encode entity list
                var entities_with_quotes = _.map(jQuery('#result_entities').val().split(','), function(v){
                    return '"'+v+'"'
                });
                var entities = entities_with_quotes.join(' ');

                jQuery('#results-async').prepend('<b>Refreshing results...</b>').load('/das/kws_async', {
                    // TODO: = vs :
                    // TODO: KWS could be smarted to distinguish that this is result type


                    'input': conditions + ' '+ entities
                    // TODO: other parameters
                });



            };




            visualSearch = VS.init({
                container: jQuery('.visual_search_filters'),
                query: '',
                showFacets : true,
                remainder   : 'keywords',
                unquotable : [
                ],
                callbacks  : {
                    search : function(query, searchCollection) {
                        if (_DEBUG) console.log('search callback', query, searchCollection);
                        do_search_async();
                    },
                    // These are the facets that will be autocompleted in an empty input.
                    facetMatches: function (callback) {
                        callback($daskeys_grouped_json,
                                // preserves order of terms/facets
                                // (so far this exclude free keywords)
                                { preserveOrder: true,
                                  allowInfix: true });
                        if (_DEBUG) console.log('facet matches:', this, callback);
                    },

                    // These are the values that match specific categories, autocompleted
                    // in a category's input field.  searchTerm can be used to filter the
                    // list on the server-side, prior to providing a list to the widget.
                    valueMatches: function (facet, searchTerm, callback) {
                        // static values
                        $selkeys_values

                        switch (facet){
                            case 'dataset':
                                jQuery.getJSON(
                                        '/das/autocomplete',
                                        // 'dataset=' +
                                        { query:  searchTerm },
                                        function(data){
                                            if (_DEBUG) console.log(data);
                                            var matches = jQuery.map(data, function(item, i){
                                                if (item.info == 'dataset'){
                                                    return item.value.replace('dataset=', '')
                                                }
                                                return null;
                                            });

                                            //jQuery.each(data.items, function(i,item){
                                            //}
                                            if (_DEBUG)
                                                console.log(callback);
                                            callback(matches, {
                                                preserveMatches: true // to allow wildcard!
                                            });
                                        })
                                        .error(function(){
                                                callback([])
                                            }
                                        );


                                break;
                            default:
                                if (_DEBUG) console.log('other facet:', facet, searchTerm, callback);
                        }

                    }
                }
            });



            jQuery('#submit').click(function(evt){
                evt.preventDefault();
                var query = visualSearch.searchBox.value();
                do_search_async();
            });

            jQuery("#result_entities").tagit({
                showAutocompleteOnFocus: true,
                allowSpaces: true,
                autocomplete: {source: $out_daskeys_json}
            });
            //.focus(function() { jQuery(this).autocomplete("search", ""); });;

        });
    </script>







</div> <!-- end of main div -->
<!-- end of das_ambiguous_html.tmpl -->

