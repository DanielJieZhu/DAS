
<!-- das_faq.tmpl -->
<div class="page">
<div class="normal">

<!-- BEGIN NEW SECTION -->
<h3>General questions about DAS</h3>
<a href="javascript:ShowTag('architecture')">show</a> |
<a href="javascript:HideTag('architecture')">hide</a> this section.
<div id="architecture" class="hide">

<div class="navcontainer">
<ul>
<li>
What does DAS stand for?
</li>
</ul>
<p>
The Data Aggregation Service (DAS) is a CMS project which provides access
to participating CMS data-services (such as DBS, Phedex, SiteDB, etc), 
using a simple, flexible query language. It supersedes the 
<a href="http://cmsweb.cern.ch/dbs_discovery">
Data Discovery</a> service.
It represents data from all data-services in a common 
JSON/XML-format, provides 
<a href="/das/cli">
a Command Line Interface (CLI)
</a>
and a web-based interface.
</p>

<ul>
<li>
How does DAS know the relationship between objects from different CMS data-services?
</li>
</ul>
<p>
The various CMS data-services each collect information about a particular domain of CMS
operations, e.g. PhEDEx holds information about data location and DBS holds information
about what those data files contain. If we consider all the data-services together
they represent a complete set of meta-data for our experiment. 
In almost every case there are overlaps between the information provided by each, and often
that is the information we most need to know. A typical example is DBS and Run Summary DB.
In DBS we store processing information about our data, such as
dataset, blocks, files, runs. In the Run Summary DB we store run specific
information about each run. Obviously, the common entity between these two services
is the "run". In DAS, such commonalities are taken into account and one or more keys are
used to relate one service with another.
</p>

<ul>
<li>
How does DAS aggregate data between different data-services?
</li>
</ul>
<p>
When a user queries DAS, it analyses the query to find all data services holding
relevant data, and then invokes the appropriate data-service APIs.
The responses from each data service are transformed into a common DAS notation,
and records from different services containing identified common keys are merged.
For example, if a user queries for a block name, DBS and PhEDEx APIs are both invoked. 
DBS returns information about the dataset the block belongs to, whereas PhEDEx returns
information about the file's physical characteristics and current locations. These
records are merged and the user sees a single document about each block.
</p>

</div>
</div>
<hr class="line" />
<!-- END OF SECTION -->

<!-- BEGIN NEW SECTION -->
<h3>DAS queries</h3>
<a href="javascript:ShowTag('dasql')">show</a> |
<a href="javascript:HideTag('dasql')">hide</a> this section
<div id="dasql" class="hide">
<div class="navcontainer">

For more information about DAS-QL please refer to
<a href="https://twiki.cern.ch/twiki/bin/viewauth/CMS/DASQueryGuide">DASQueryGuide</a>
<ul>
<li>
Which operators does DAS support?
</li>
</ul>
<p>
DAS supports the following list of operators
<div class="example">
$operators
</div>
</p>

<ul>
<li>
Can I select/aggregate certain fields in DAS records?
</li>
</ul>
<p>
Yes, for that you can use pipe "|" in your query. For example
<div class="example">
file dataset=/a/b/c | grep file.name, file.size
</div>
will strip out all fields except for file.name and file.size in the result.
You can also use the following list of aggregate functions
<div class="example">
$aggregators
</div>
For example
<div class="example">
file dataset=/a/b/c | sum(file.size)
</div>
will return a single record showing the total file size of all files in that dataset. 
You can also combine filters and aggregators together, for instance
<div class="example">
file dataset=/a/b/c | grep file.name, file.size | sum(file.size), count(file.name)
</div>
</p>

<ul>
<li>
What should I type in the DAS web interface?
</li>
</ul>
<p>
DAS uses free text-based keyword search queries, so use your common knowledge about
CMS data, e.g. dataset, block, run. If you're not sure which DAS keys to use,
please see <a href="/das/services">Services</a> DAS section.

<br />
Please note that using conditions will make your query a lot faster. A completely wildcard
query like *block* (equivalent to *block=**) will require huge amounts of data to be fetched
before any aggregation or filter steps you have specified run. 
</p>

<ul>
<li>
How do I use conditions?
</li>
</ul>
<p>
Add an equals sign after the DAS key to specify a condition, e.g.
<div class="example">
site=T1_CH_CERN
</div>
Note that you can use wildcards in most conditions, and multiple conditions.
In future there may also be operators other than just = available.
</p>

<ul>
<li>
How do I combine conditions or specify multiple DAS keys?
</li>
</ul>
<p>
Yes, you can, the following forms
<div class="example">
site=T1_CH_CERN block=/a/b/c
</div>
or
<div class="example">
site=T1_CH_CERN, block=/a/b/c
</div>
are equivalent.
</p>

<ul>
<li>
Can I use conditions in filters?
</li>
</ul>
<p>
Yes you can, here is an example:
<div class="example">
file dataset=/a/b/c | grep file.size>1, file.size<100
</div>
</p>

<ul>
<li>
How do I combine conditions or specify multiple DAS keys?
</li>
</ul>
<p>
Yes, you can, the following forms
<div class="example">
site=T1_CH_CERN block=/a/b/c
</div>
or
<div class="example">
site=T1_CH_CERN, block=/a/b/c
</div>
are equivalent.
</p>

<ul>
<li>
Does DAS support logical operators for multiple conditions?
</li>
</ul>
<p>
Right now DAS treats multiple conditions as an AND operation. 
We do plan to extend the syntax to support at least the OR operator in the near future.
</p>

<ul>
<li>
How do I limit the output to only the fields I want to see?
</li>
</ul>
<p>
DAS supports a simple grep operation. For example
<div class="example">
site=T1_CH_CERN | grep site.name
</div>
will filter out all fields except for site.name.
You can also provide multiple fields to the grep filter, e.g.
<div class="example">
block=/a/b/c#123 | grep block.name, block.size
</div>
Please note that multiple grep operators, e.g. 
<em>... | grep something | grep something_else</em>
are not supported. The DAS grep function
is not equivalent to UNIX grep.
</p>

<ul>
<li>
Why is there a delay before responses to DAS queries?
</li>
</ul>
<p>
DAS doesn't hold any data you request (unless someone has already requested it),
instead it has to retrieve data from each relevant data-services and
place them into its cache, transform and finally merge the data before
responding to you. The DAS web interface is designed to provide you as much
feedback as possible, please pay attention to messages appearing next 
to the spinning wheel.
</p>

<ul>
<li>
Why do I see duplicate results and how to avoid them?
</li>
</ul>
<p>
Indeed, in some cases, duplicates can appear in DAS. For instance if
you perform two consecutive queries:
<div class="example">
<pre>
run between [20853,20859]
run in [20853,20859]
</pre>
</div>
you'll see runs that are duplicate. This happens because input queries are
different while back-end API used the same set of parameters. Since DAS queries
are different their hashes will be different too, which leads to two different
API calls, who will create different records in DAS with different expiration
timestamps. To avoid this issue you can simple apply the <em>unique</em>
filter to the output, like:
<pre class="example">
run in [20853,20859] | unique
</pre>
</p>

</div>
</div>
<hr class="line" />
<!-- END OF SECTION -->

<!-- BEGIN NEW SECTION -->
<h3>DAS records</h3>
<a href="javascript:ShowTag('dasrecords')">show</a> |
<a href="javascript:HideTag('dasrecords')">hide</a> this section
<div id="dasrecords" class="hide">
<div class="navcontainer">

<ul>
<li>
What is a DAS record?
</li>
</ul>
<p>
A DAS record represents aggregated information about a particular entity, e.g. site,
block, run, from the results of different CMS data-services. For instance, the block
information is stored in both DBS and PhEDEx data-services. In DAS this information
is aggregated and stored as a single record. For example, here is a typical DAS record:
<div class="example">
<pre>
{
 "das_id":  [4b2f8fc5e2194ee15500001f, 4b2f8fc2e2194ee155000009],
 "_id": 4b2f8fc5e2194ee155000020,
 "site": [
   {
    "name": "T1_CH_CERN",
    "ce": "ce126.cern.ch"
   },
   {
    "admin": {
       "title": "Site Admin",
       "surname": "...",
       "email": "...",
       "forename": "..."
      },
    "name": "T1_CH_CERN"
   }]
}
</pre>
</div>
</p>

<ul>
<li>
What do the <b>das_id</b> and <b>id</b> keys represent in a DAS record?
</li>
</ul>
<p>
The <b>id</b> is a unique identifier of DAS record in the DAS database, while
<b>das_id</b> refers to the DAS records which contain information about
URL, api and the parameters used to fetch this data.
</p>

<ul>
<li>
Which data formats are supported?
</li>
</ul>
<p>
In DAS we provide XML, JSON and HTML representations of CMS meta-data.
To use another data-format just use appropriate option from drop-down menu
on the search page.
</p>

<ul>
<li>
Why do DAS XML/JSON records contain an additional header?
</li>
</ul>
<p>
All DAS records are represented according to DAS data-specification, see this 
<a href="https://twiki.cern.ch/twiki/bin/viewauth/CMS/DMWMDataAggregationService">link</a> 
to read more about it. For simplicity and readability of DAS records in HTML view
we simply drop this header from shown records.
</p>

</div>
</div>
<hr class="line" />
<!-- END OF SECTION -->

<!-- BEGIN NEW SECTION -->
<h3>CMS queries</h3>
<a href="javascript:ShowTag('cmsqueries')">show</a> |
<a href="javascript:HideTag('cmsqueries')">hide</a> this section
<div id="cmsqueries" class="hide">
<div class="navcontainer">

<p>
Here is an un-complete set of queries support in DAS

<p>
Queries to get Site information
<div class="example">
<pre>
site=T1_CH_CERN
site=T1_*
site=T1_* | grep site.name
site=T1_* | grep site.se
</pre>
</div>
</p>


<p>
Queries to get run information
<div class="example">
<pre>
run=20853
run=20853 | grep run.components
run in [20853,20859]
run between [20853,20859]
run between [20853,20859] | grep run.run_number
run between [20853,20859] | grep run.run_number | unique
</pre>
</div>
</p>

<p>
DBS-like queries
<div class="example">
<pre>
primary_ds
dataset | grep dataset.name
block dataset=/QCDpt30/Summer08_IDEAL_V9_skim_hlt_v1/USER
block dataset=/QCDpt30/Summer08_IDEAL_V9_skim_hlt_v1/USER | sum(block.size)
file dataset=/QCDpt30/Summer08_IDEAL_V9_skim_hlt_v1/USER
file dataset=/QCDpt30/Summer08_IDEAL_V9_skim_hlt_v1/USER | grep file.name, file.size
release=CMSSW_2_0_8
release=CMSSW_2_0_8 | grep release.name, release.algorithm.executable, release.algorithm.name
</pre>
</div>
</p>

<p>
Queries to search CMSSW configuration files based on provided
release name and some search keywords. Please note to use multiple keywords
please use quotes:
<div class="example">
<pre>
config release=CMSSW_3_6_0 search="track ckfTrackCandidates"
</pre>
</div>
</p>

<p>
Miscellaneous queries:
<div class="example">
<pre>
monitor
jobsummary
ip=137.138.141.145 | grep ip.City
</pre>
</div>
</p>

</div>
</div>
<!-- END OF SECTION -->


</div> <!-- end of class="normal" -->
</div> <!-- end of class="page" -->

<!-- end of das_faq.tmpl -->

